# STart 11:41
title_slide:
  title: Scrollytelling
  gradient: "pink"
  font: "standard"
  subtitle: |
    Interactive data visualization using d3.js and scrollama

    - by Erik Gimbergsson <erik.gimbergsson@combitech.com>
chapters:
  - title: "Intro"
    type: bullet_points
    bullet_points:
      - text: "Scrollytelling - Interaktiva och förklarande datavisualiseringar"
        extra: "[bold pink]Scrollbaserad[/] interaktion som [bold pink]stegvis[/] ger en guidad upplevelse på nätet."
      - text: "En del av data storytelling och datajournalism"
        extra: "[bold pink]Människocentrerad[/] form av data-kontextualisering. Förenklar komplicerade koncept för allmänheten."
      - text: "'Låt mig visa dig'"
        extra: "Början, utveckling, klimax, slutsats (följa en [bold pink]dramaturgisk modell[/])"
    style: "bright_yellow bold"
  - title: "Teknikstack"
    code: |

      ### **D3.js + Scrollama**
      - Idag ska vi använda två kraftfulla JavaScript-bibliotek som används fligt av både **informations visualisering** och **data journalism**

      ### D3.js - *Data-Driven Documents*
        - D3.js används för att, med **full kontroll**, skapa dynamiska och interaktiva datavisualiseringar.
      ### Scrollama - *Scroll-baserad interaktion*
        - Populärt bibliotek som använder ***Intersection Observer API*** för att detektera scroll-position och trigga animationer.
    steps:
      - description: "Vår techstack"
        focus:
          - type: markdown
  - title: "Pizza index"
    type: bullet_points
    bullet_points:
      - text: "SCB Pizza Index"
        extra: "En artikel som undersöker hur priset på pizzor (hembakade, köpta och frysta) har förändrats över tiden med hjälp av [cyan bold] KPI - konsument pris index[/]"
      - text: "Varugrupper och konument pris index"
        extra: "SCBs Pizza index beräknas med såkallade [cyan bold italic]varugrupper[/] som är [cyan italic]konsumentprisindex på artikelgruppsnivå[/]."
      - text: "Vissa ingredienser påverkar priset mer än andra"
        extra: "Ost och skinka är de mest betydelsefulla ingredienserna för priset på en hembakad Vesuvio. [bold pink]Och påverkar därmed priset mest.[/]"
      - text: "Scrollytelling?"
        extra: "[orange bold]MED CARBONARA INDEX![/]"
    style: "bright_green bold"
  - title: "Vår data"
    code: |
      [
        {
          "date": "2015-01",
          "Pasta": 100.0,
          "Pork": 100.0,
          "Eggs": 100.0,
          "Hard Cheese": 100.0,
          "Carbonara_index": 100.0
        },
        ...
      ]
    steps:
      - description: "[bold pink]Carbonara_index[/] som jag tagit fram innehåller varugrupper med ett viktat prisindex som beräknas månadsvis."
        focus:
          - type: range
            start: 2
            end: 145
            style: "bright_green bold"

      - description: "Vi har data från 2015 till 2025"
        focus:
          - type: line
            line_number: 2
            style: "bright_green bold"

      - description: "Dessa är varugrupperna jag valde för att representera carbonara index [italic pink](viktade enligt kostnad och mängd i en portion carbonara)[/]"
        focus:
          - type: literal
            text: '"Pasta"'
            style: "bright_yellow bold"
          - type: literal
            text: '"Pork"'
            style: "bright_magenta bold"
          - type: literal
            text: '"Eggs"'
            style: "bright_cyan bold"
          - type: literal
            text: '"Hard Cheese"'
            style: "bright_blue bold"
          - type: literal
            text: '"Carbonara_index"'
            style: "bright_white bold"

      # ➜ NYTT STEG FÖR ATT BETONA BASVÄRDET 100
      - description: "Alla serier är normaliserade – vi startar på index [bold yellow]100[/]"
        focus:
          - type: regex
            pattern: "\\b100\\.0\\b"
            style: "bold yellow"

        # --- Steg 1: Ladda data & rita axlar ---------------------------------
  - title: "D3 start"
    code: |
      <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8" />
              <title>A simple graph</title>
              <script
                src="https://d3js.org/d3.v7.min.js">
              </script>
            </head>
        ...
        <body>
          <script>
              d3.json("data.json").then(function (data) {
                ...
              }
          </script>
        </body>
      }
    steps:
      - description: Låt oss börja rita ut en graf med D3.js
        focus:
          - type: syntax
            lexer: "html" # optional: language to highlight (default: python)
            theme: "ansi_dark" # optional: color theme
      - description: "Vi importerar [bold orange]D3.js[/] direkt i [bold pink]HTML[/] dokumentet för enkelthetens skull"
        focus:
          - type: literal
            text: 'src="https://d3js.org/d3.v7.min.js">'
            style: "bright_yellow bold"
          - type: regex
            pattern: "parseDate"
            style: "bright_cyan bold"
      - description: "Sen hämtar vi datan genom [bold orange]D3:s[/] [italic bold]data fetcher[/] med ett async promise."
        focus:
          - type: line
            line_number: 12
            style: "bright_green bold"
          - type: line
            line_number: 13
            style: "bright_green bold"
          - type: line
            line_number: 14
            style: "bright_green bold"

  - title: "D3 axlar"
    code: |
      <script>
          d3.json("data.json").then(function (data) {
              const parseDate = d3.timeParse("%Y-%m");
              data.forEach((d) => {
                d.date = parseDate(d.date);
              });

              const x = d3.scaleTime()
                .domain(d3.extent(data, (d) => d.date))
                .range([0, width]);

              const y = d3.scaleLinear()
                .domain([
                  90,
                  d3.max(data, (d) =>
                    Math.max(
                      d.Pasta,
                      d.Pork,
                      d.Eggs,
                      d["Hard Cheese"],
                      d.Carbonara
                    )
                  ),
                ])
                .range([height, 0]);
          }
      </script>
    steps:
      - description: Nu definerar vi X och Y axlarna
        focus:
          - type: syntax
            lexer: "html" # optional: language to highlight (default: python)
            theme: "ansi_dark" # optional: color theme
      - description: "Först parsar vi datan med d3.ParseTime som genererar formaterade ticks till axlarna..."
        focus:
          - type: literal
            text: ' const parseDate = d3.timeParse("%Y-%m")'
            style: "bright_yellow bold"
          - type: literal
            text: "d.date = parseDate(d.date)"
            style: "bright_cyan bold"
      - description: "Nu definerar vi två skalor; [bold cyan]tidsskala[/] och [bold orange]linjär skala[/]."
        focus:
          - type: line
            line_number: 7
            style: "bright_cyan bold"
          - type: line
            line_number: 11
            style: "yellow bold"
      - description: "Sedan definierar vi skalans [bold cyan]domain[/] och [bold orange]range[/]. Man kan föreställa sig [bold cyan]'domain' som talen på en linjal[/] och [bold orange]'range' som linjalens längd[/]."
        focus:
          # X-skalan
          - type: line_containing
            pattern: ".domain("
            style: "bright_cyan bold"
          - type: literal # highlight .range(…)
            text: ".range("
            style: "yellow bold"
            match_index: 0
          # Y-skalan
          - type: line_containing
            pattern: ".range("
            style: "yellow bold"
          - type: line
            line_number: 13
            style: "bright_cyan bold"
          - type: line
            line_number: 14
            style: "bright_cyan bold"
          - type: line
            line_number: 15
            style: "bright_cyan bold"
          - type: line
            line_number: 16
            style: "bright_cyan bold"
          - type: line
            line_number: 17
            style: "bright_cyan bold"
          - type: line
            line_number: 18
            style: "bright_cyan bold"
          - type: line
            line_number: 19
            style: "bright_cyan bold"
          - type: line
            line_number: 20
            style: "bright_cyan bold"
          - type: line
            line_number: 21
            style: "bright_cyan bold"
          - type: line
            line_number: 22
            style: "bright_cyan bold"
          - type: line
            line_number: 23
            style: "bright_cyan bold"

  - title: "D3 Rita axlarna"
    code: |
      <script>
          ....

          const svg = d3
            .select("#chart")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);

          svg
            .append("g")
            .attr("transform", `translate(0,${height})`)
            .call(d3.axisBottom(x).tickFormat(d3.timeFormat("%Y")));

          svg.append("g").call(d3.axisLeft(y));

          svg
            .append("text")
            .attr(
              "transform",
              `translate(${width / 2}, ${height + margin.bottom})`
            )
            .style("text-anchor", "middle")
            .text("Year");

          svg
            .append("text")
            .attr("transform", "rotate(-90)")
            .attr("y", 0 - margin.left)
            .attr("x", 0 - height / 2)
            .attr("dy", "1em")
            .style("text-anchor", "middle")
            .text("Price Index");

      </script>
    steps:
      - description: Nu börjar det roliga. Som ni har märkt finns det inga färdiga grafer i D3.js, utan vi måste rita dom själva. Detta gör vi med en SVG container som vi adderar olika element till.
        focus:
          - type: syntax
            lexer: "html" # optional: language to highlight (default: python)
            theme: "ansi_dark" # optional: color theme
      - description: "Här är vår SVG container som vi lägger till DOM-trädet."
        focus:
          - type: range
            start: 20
            end: 290
            style: "bright_yellow bold"
      - description: "Sen så ritar och lägger till våra [bold cyan]x-axel[/] och [bold orange]y-axel[/] till DOM-trädet"
        focus:
          - type: range
            start: 290
            end: 429
            style: "bright_cyan bold"
          - type: range
            start: 430
            end: 475
            style: "yellow"
      - description: "Sist så ritar vi ut våra labels för [bold cyan]x-axeln[/] och [bold orange]y-axeln[/]"
        focus:
          # X-skalan
          - type: range
            start: 475
            end: 670
            style: "bright_cyan bold"
          - type: range
            start: 670
            end: 894
            style: "yellow"

  - title: "D3 linjer"
    code: |
      <script>
          ....

        const color = d3
          .scaleOrdinal(d3.schemeObservable10)
          .domain(["Pasta", "Pork", "Eggs", "Hard Cheese", "Carbonara_index"]);

        const line = d3
          .line()
          .x((d) => x(d.date))
          .y((d) => y(d.value))
          .curve(d3.curveMonotoneX);

        const ingredients = ["Pasta", "Pork", "Eggs", "Hard Cheese", "Carbonara_index"];

        const lineData = ingredients.map((ingredient) => ({
          name: ingredient,
          values: data.map((d) => ({
            date: d.date,
            value: d[ingredient],
          })),
        }));

      </script>
    steps:
      - description: På samma sätt som vi ritar ut axlarna så måste vi först definera linjerna innan vi kan rita dom.
        focus:
          - type: syntax
            lexer: "html" # optional: language to highlight (default: python)
            theme: "ansi_dark" # optional: color theme
      - description: "Vi börjar med en färgskala som vi mappar till vår data"
        focus:
          - type: range
            start: 20
            end: 155
            style: "bright_yellow bold"
      - description: "Vi skapar en [bold pink]Linje-generator[/] som använder [bold cyan]interpolatorn 'MonotoneX'[/] för att rita mjukare linjer. Vi passar även på att [bold orange]separera våra kategorier[/], så vi får en linje per kategori."
        focus:
          - type: range
            start: 155
            end: 265
            style: "bright_cyan bold"
          - type: range
            start: 350
            end: 525
            style: "yellow"
          # X-skalan
  - title: "D3 Rita linjer"
    code: |
      <script>
        ....
        const lines = svg
          .selectAll(".line")
          .data(lineData)
          .enter()
          .append("g")
          .attr("class", "line");

        lines
          .append("path")
          .attr(
            "class",
            (d) =>
              `line-path line-${d.name
                .toLowerCase()
                .replace(/\s+/g, "-")
                .replace(/_/g, "-")}`
          )

          .attr("d", (d) => line(d.values))
          .style("stroke", (d) => color(d.name))
          .style("stroke-width", (d) =>
            d.name === "Carbonara_index" ? 3 : 1.5
          )
          .style("fill", "none")
          .style("transition", "opacity 0.3s ease");
      });

      </script>
    steps:
      - description: Nu kan vi börja rita linjerna genom att skapa dom och lägga till dem till SVG elementet i DOM-trädet.
        focus:
          - type: syntax
            lexer: "html" # optional: language to highlight (default: python)
            theme: "ansi_dark" # optional: color theme
      - description: "Vi lägger till datan i linjer generatorn"
        focus:
          - type: range
            start: 15
            end: 70
            style: "bright_yellow bold"
          - type: literal
            text: "lineData"
            style: "bright_cyan bold"
          - type: range
            start: 78
            end: 140
            style: "bright_yellow bold"

      - description: "Sen ritar vi ut varje linje och appendar dom till SVG elementet i DOM-trädet"
        focus:
          - type: range
            start: 140
            end: 575
            style: "bright_green bold"
